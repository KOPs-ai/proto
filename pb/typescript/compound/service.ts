// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.33.0
// source: compound/service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { GetAPRRequest, GetAPRResponse } from "./models/getAPR";
import {
  SuppliedBalanceRequest,
  SuppliedBalanceResponse,
  SupplyERC20Request,
  SupplyERC20Response,
} from "./models/supplyERC20";
import { WithdrawERC20Request, WithdrawERC20Response } from "./models/withdrawERC20";

export const protobufPackage = "compound";

export const COMPOUND_PACKAGE_NAME = "compound";

export interface CompoundServiceClient {
  supplyErc20(request: SupplyERC20Request): Observable<SupplyERC20Response>;

  withdrawErc20(request: WithdrawERC20Request): Observable<WithdrawERC20Response>;

  getApr(request: GetAPRRequest): Observable<GetAPRResponse>;

  getSuppliedBalance(request: SuppliedBalanceRequest): Observable<SuppliedBalanceResponse>;
}

export interface CompoundServiceController {
  supplyErc20(
    request: SupplyERC20Request,
  ): Promise<SupplyERC20Response> | Observable<SupplyERC20Response> | SupplyERC20Response;

  withdrawErc20(
    request: WithdrawERC20Request,
  ): Promise<WithdrawERC20Response> | Observable<WithdrawERC20Response> | WithdrawERC20Response;

  getApr(request: GetAPRRequest): Promise<GetAPRResponse> | Observable<GetAPRResponse> | GetAPRResponse;

  getSuppliedBalance(
    request: SuppliedBalanceRequest,
  ): Promise<SuppliedBalanceResponse> | Observable<SuppliedBalanceResponse> | SuppliedBalanceResponse;
}

export function CompoundServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["supplyErc20", "withdrawErc20", "getApr", "getSuppliedBalance"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CompoundService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CompoundService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const COMPOUND_SERVICE_NAME = "CompoundService";

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: hypurrfi/service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { GetAPRRequest, GetAPRResponse } from "../protocol/models/getAPR";
import { GetAPYRequest, GetAPYResponse } from "../protocol/models/getAPY";
import { GetTVLRequest, GetTVLResponse } from "../protocol/models/getTVL";
import { SuppliedBalanceRequest, SuppliedBalanceResponse } from "../protocol/models/supplyERC20";
import { BorrowedBalanceRequest, BorrowedBalanceResponse } from "../protocol/models/withdrawERC20";
import { ApproveERC20Request, ApproveERC20Response } from "./models/approveERC20";
import { GetLendingPoolRequest, GetLendingPoolResponse } from "./models/getLendingPool";
import { SupplyERC20Request, SupplyERC20Response } from "./models/supplyERC20";
import { WithdrawERC20Request, WithdrawERC20Response } from "./models/withdrawERC20";

export const protobufPackage = "hypurrfi";

export const HYPURRFI_PACKAGE_NAME = "hypurrfi";

export interface HypurrfiServiceClient {
  supplyErc20(request: SupplyERC20Request): Observable<SupplyERC20Response>;

  withdrawErc20(request: WithdrawERC20Request): Observable<WithdrawERC20Response>;

  getLendingPool(request: GetLendingPoolRequest): Observable<GetLendingPoolResponse>;

  getApr(request: GetAPRRequest): Observable<GetAPRResponse>;

  getApy(request: GetAPYRequest): Observable<GetAPYResponse>;

  getTvl(request: GetTVLRequest): Observable<GetTVLResponse>;

  getSuppliedBalance(request: SuppliedBalanceRequest): Observable<SuppliedBalanceResponse>;

  getBorrowedBalance(request: BorrowedBalanceRequest): Observable<BorrowedBalanceResponse>;

  approveErc20(request: ApproveERC20Request): Observable<ApproveERC20Response>;
}

export interface HypurrfiServiceController {
  supplyErc20(
    request: SupplyERC20Request,
  ): Promise<SupplyERC20Response> | Observable<SupplyERC20Response> | SupplyERC20Response;

  withdrawErc20(
    request: WithdrawERC20Request,
  ): Promise<WithdrawERC20Response> | Observable<WithdrawERC20Response> | WithdrawERC20Response;

  getLendingPool(
    request: GetLendingPoolRequest,
  ): Promise<GetLendingPoolResponse> | Observable<GetLendingPoolResponse> | GetLendingPoolResponse;

  getApr(request: GetAPRRequest): Promise<GetAPRResponse> | Observable<GetAPRResponse> | GetAPRResponse;

  getApy(request: GetAPYRequest): Promise<GetAPYResponse> | Observable<GetAPYResponse> | GetAPYResponse;

  getTvl(request: GetTVLRequest): Promise<GetTVLResponse> | Observable<GetTVLResponse> | GetTVLResponse;

  getSuppliedBalance(
    request: SuppliedBalanceRequest,
  ): Promise<SuppliedBalanceResponse> | Observable<SuppliedBalanceResponse> | SuppliedBalanceResponse;

  getBorrowedBalance(
    request: BorrowedBalanceRequest,
  ): Promise<BorrowedBalanceResponse> | Observable<BorrowedBalanceResponse> | BorrowedBalanceResponse;

  approveErc20(
    request: ApproveERC20Request,
  ): Promise<ApproveERC20Response> | Observable<ApproveERC20Response> | ApproveERC20Response;
}

export function HypurrfiServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "supplyErc20",
      "withdrawErc20",
      "getLendingPool",
      "getApr",
      "getApy",
      "getTvl",
      "getSuppliedBalance",
      "getBorrowedBalance",
      "approveErc20",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("HypurrfiService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("HypurrfiService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const HYPURRFI_SERVICE_NAME = "HypurrfiService";

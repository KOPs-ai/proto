// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: strategy/service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { GetBiconomyAccountRequest, GetBiconomyAccountResponse } from "./models/account";
import { GetAPYRequest, GetAPYResponse } from "./models/apy";
import { GetProtocolBalanceRequest, GetProtocolBalanceResponse } from "./models/balance";
import { GetHealthRequest, GetHealthResponse } from "./models/health";
import { GetCurrentStepRequest, GetCurrentStepResponse, GetUserJobsRequest, GetUserJobsResponse } from "./models/jobs";
import {
  GetPermissionRequest,
  GetPermissionResponse,
  UpdatePermissionRequest,
  UpdatePermissionResponse,
} from "./models/permission";
import {
  GetStrategyListRequest,
  GetStrategyListResponse,
  StartStrategyRequest,
  StartStrategyResponse,
  WithdrawStrategyRequest,
  WithdrawStrategyResponse,
} from "./models/strategy";

export const protobufPackage = "strategy";

export const STRATEGY_PACKAGE_NAME = "strategy";

export interface StrategyServiceClient {
  getHealth(request: GetHealthRequest): Observable<GetHealthResponse>;

  getStrategyList(request: GetStrategyListRequest): Observable<GetStrategyListResponse>;

  getPermission(request: GetPermissionRequest): Observable<GetPermissionResponse>;

  updatePermission(request: UpdatePermissionRequest): Observable<UpdatePermissionResponse>;

  startStrategy(request: StartStrategyRequest): Observable<StartStrategyResponse>;

  withdrawStrategy(request: WithdrawStrategyRequest): Observable<WithdrawStrategyResponse>;

  getApy(request: GetAPYRequest): Observable<GetAPYResponse>;

  getProtocolBalance(request: GetProtocolBalanceRequest): Observable<GetProtocolBalanceResponse>;

  getBiconomyAccount(request: GetBiconomyAccountRequest): Observable<GetBiconomyAccountResponse>;

  getUserJobs(request: GetUserJobsRequest): Observable<GetUserJobsResponse>;

  getCurrentStep(request: GetCurrentStepRequest): Observable<GetCurrentStepResponse>;
}

export interface StrategyServiceController {
  getHealth(request: GetHealthRequest): Promise<GetHealthResponse> | Observable<GetHealthResponse> | GetHealthResponse;

  getStrategyList(
    request: GetStrategyListRequest,
  ): Promise<GetStrategyListResponse> | Observable<GetStrategyListResponse> | GetStrategyListResponse;

  getPermission(
    request: GetPermissionRequest,
  ): Promise<GetPermissionResponse> | Observable<GetPermissionResponse> | GetPermissionResponse;

  updatePermission(
    request: UpdatePermissionRequest,
  ): Promise<UpdatePermissionResponse> | Observable<UpdatePermissionResponse> | UpdatePermissionResponse;

  startStrategy(
    request: StartStrategyRequest,
  ): Promise<StartStrategyResponse> | Observable<StartStrategyResponse> | StartStrategyResponse;

  withdrawStrategy(
    request: WithdrawStrategyRequest,
  ): Promise<WithdrawStrategyResponse> | Observable<WithdrawStrategyResponse> | WithdrawStrategyResponse;

  getApy(request: GetAPYRequest): Promise<GetAPYResponse> | Observable<GetAPYResponse> | GetAPYResponse;

  getProtocolBalance(
    request: GetProtocolBalanceRequest,
  ): Promise<GetProtocolBalanceResponse> | Observable<GetProtocolBalanceResponse> | GetProtocolBalanceResponse;

  getBiconomyAccount(
    request: GetBiconomyAccountRequest,
  ): Promise<GetBiconomyAccountResponse> | Observable<GetBiconomyAccountResponse> | GetBiconomyAccountResponse;

  getUserJobs(
    request: GetUserJobsRequest,
  ): Promise<GetUserJobsResponse> | Observable<GetUserJobsResponse> | GetUserJobsResponse;

  getCurrentStep(
    request: GetCurrentStepRequest,
  ): Promise<GetCurrentStepResponse> | Observable<GetCurrentStepResponse> | GetCurrentStepResponse;
}

export function StrategyServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getHealth",
      "getStrategyList",
      "getPermission",
      "updatePermission",
      "startStrategy",
      "withdrawStrategy",
      "getApy",
      "getProtocolBalance",
      "getBiconomyAccount",
      "getUserJobs",
      "getCurrentStep",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("StrategyService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("StrategyService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const STRATEGY_SERVICE_NAME = "StrategyService";

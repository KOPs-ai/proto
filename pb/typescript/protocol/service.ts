// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: protocol/service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { GetAPRRequest, GetAPRResponse } from "./models/getAPR";
import { GetAPYRequest, GetAPYResponse } from "./models/getAPY";
import { GetTVLRequest, GetTVLResponse } from "./models/getTVL";
import { SuppliedBalanceRequest, SuppliedBalanceResponse } from "./models/supplyERC20";
import { BorrowedBalanceRequest, BorrowedBalanceResponse } from "./models/withdrawERC20";

export const protobufPackage = "protocol";

export const PROTOCOL_PACKAGE_NAME = "protocol";

export interface ProtocolServiceClient {
  getApr(request: GetAPRRequest): Observable<GetAPRResponse>;

  getApy(request: GetAPYRequest): Observable<GetAPYResponse>;

  getTvl(request: GetTVLRequest): Observable<GetTVLResponse>;

  getSuppliedBalance(request: SuppliedBalanceRequest): Observable<SuppliedBalanceResponse>;

  getBorrowedBalance(request: BorrowedBalanceRequest): Observable<BorrowedBalanceResponse>;
}

export interface ProtocolServiceController {
  getApr(request: GetAPRRequest): Promise<GetAPRResponse> | Observable<GetAPRResponse> | GetAPRResponse;

  getApy(request: GetAPYRequest): Promise<GetAPYResponse> | Observable<GetAPYResponse> | GetAPYResponse;

  getTvl(request: GetTVLRequest): Promise<GetTVLResponse> | Observable<GetTVLResponse> | GetTVLResponse;

  getSuppliedBalance(
    request: SuppliedBalanceRequest,
  ): Promise<SuppliedBalanceResponse> | Observable<SuppliedBalanceResponse> | SuppliedBalanceResponse;

  getBorrowedBalance(
    request: BorrowedBalanceRequest,
  ): Promise<BorrowedBalanceResponse> | Observable<BorrowedBalanceResponse> | BorrowedBalanceResponse;
}

export function ProtocolServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getApr", "getApy", "getTvl", "getSuppliedBalance", "getBorrowedBalance"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProtocolService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProtocolService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PROTOCOL_SERVICE_NAME = "ProtocolService";

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: strategyActivity/service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { GetActivityRequest, GetActivityResponse } from "./models/getActivity";
import { SubmitActivityRequest, SubmitActivityResponse } from "./models/submitActivity";

export const protobufPackage = "strategyActivity";

export const STRATEGY_ACTIVITY_PACKAGE_NAME = "strategyActivity";

export interface StrategyActivityServiceClient {
  getStrategyActivity(request: GetActivityRequest): Observable<GetActivityResponse>;

  submitActivity(request: SubmitActivityRequest): Observable<SubmitActivityResponse>;
}

export interface StrategyActivityServiceController {
  getStrategyActivity(
    request: GetActivityRequest,
  ): Promise<GetActivityResponse> | Observable<GetActivityResponse> | GetActivityResponse;

  submitActivity(
    request: SubmitActivityRequest,
  ): Promise<SubmitActivityResponse> | Observable<SubmitActivityResponse> | SubmitActivityResponse;
}

export function StrategyActivityServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getStrategyActivity", "submitActivity"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("StrategyActivityService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("StrategyActivityService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const STRATEGY_ACTIVITY_SERVICE_NAME = "StrategyActivityService";

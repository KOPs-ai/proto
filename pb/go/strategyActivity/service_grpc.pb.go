// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package strategyActivity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StrategyActivityServiceClient is the client API for StrategyActivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StrategyActivityServiceClient interface {
	GetStrategyActivity(ctx context.Context, in *GetActivityRequest, opts ...grpc.CallOption) (*GetActivityResponse, error)
	SubmitActivity(ctx context.Context, in *SubmitActivityRequest, opts ...grpc.CallOption) (*SubmitActivityResponse, error)
}

type strategyActivityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStrategyActivityServiceClient(cc grpc.ClientConnInterface) StrategyActivityServiceClient {
	return &strategyActivityServiceClient{cc}
}

func (c *strategyActivityServiceClient) GetStrategyActivity(ctx context.Context, in *GetActivityRequest, opts ...grpc.CallOption) (*GetActivityResponse, error) {
	out := new(GetActivityResponse)
	err := c.cc.Invoke(ctx, "/strategyActivity.StrategyActivityService/GetStrategyActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyActivityServiceClient) SubmitActivity(ctx context.Context, in *SubmitActivityRequest, opts ...grpc.CallOption) (*SubmitActivityResponse, error) {
	out := new(SubmitActivityResponse)
	err := c.cc.Invoke(ctx, "/strategyActivity.StrategyActivityService/SubmitActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StrategyActivityServiceServer is the server API for StrategyActivityService service.
// All implementations should embed UnimplementedStrategyActivityServiceServer
// for forward compatibility
type StrategyActivityServiceServer interface {
	GetStrategyActivity(context.Context, *GetActivityRequest) (*GetActivityResponse, error)
	SubmitActivity(context.Context, *SubmitActivityRequest) (*SubmitActivityResponse, error)
}

// UnimplementedStrategyActivityServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStrategyActivityServiceServer struct {
}

func (UnimplementedStrategyActivityServiceServer) GetStrategyActivity(context.Context, *GetActivityRequest) (*GetActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStrategyActivity not implemented")
}
func (UnimplementedStrategyActivityServiceServer) SubmitActivity(context.Context, *SubmitActivityRequest) (*SubmitActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitActivity not implemented")
}

// UnsafeStrategyActivityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StrategyActivityServiceServer will
// result in compilation errors.
type UnsafeStrategyActivityServiceServer interface {
	mustEmbedUnimplementedStrategyActivityServiceServer()
}

func RegisterStrategyActivityServiceServer(s grpc.ServiceRegistrar, srv StrategyActivityServiceServer) {
	s.RegisterService(&StrategyActivityService_ServiceDesc, srv)
}

func _StrategyActivityService_GetStrategyActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyActivityServiceServer).GetStrategyActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategyActivity.StrategyActivityService/GetStrategyActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyActivityServiceServer).GetStrategyActivity(ctx, req.(*GetActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyActivityService_SubmitActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyActivityServiceServer).SubmitActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategyActivity.StrategyActivityService/SubmitActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyActivityServiceServer).SubmitActivity(ctx, req.(*SubmitActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StrategyActivityService_ServiceDesc is the grpc.ServiceDesc for StrategyActivityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StrategyActivityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strategyActivity.StrategyActivityService",
	HandlerType: (*StrategyActivityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStrategyActivity",
			Handler:    _StrategyActivityService_GetStrategyActivity_Handler,
		},
		{
			MethodName: "SubmitActivity",
			Handler:    _StrategyActivityService_SubmitActivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strategyActivity/service.proto",
}

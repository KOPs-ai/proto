// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package strategy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StrategyServiceClient is the client API for StrategyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StrategyServiceClient interface {
	GetHealth(ctx context.Context, in *GetHealthRequest, opts ...grpc.CallOption) (*GetHealthResponse, error)
	GetStrategyList(ctx context.Context, in *GetStrategyListRequest, opts ...grpc.CallOption) (*GetStrategyListResponse, error)
	GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionResponse, error)
	UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*UpdatePermissionResponse, error)
	StartStrategy(ctx context.Context, in *StartStrategyRequest, opts ...grpc.CallOption) (*StartStrategyResponse, error)
	WithdrawStrategy(ctx context.Context, in *WithdrawStrategyRequest, opts ...grpc.CallOption) (*WithdrawStrategyResponse, error)
	GetAPY(ctx context.Context, in *GetAPYRequest, opts ...grpc.CallOption) (*GetAPYResponse, error)
	GetProtocolBalance(ctx context.Context, in *GetProtocolBalanceRequest, opts ...grpc.CallOption) (*GetProtocolBalanceResponse, error)
	GetBiconomyAccount(ctx context.Context, in *GetBiconomyAccountRequest, opts ...grpc.CallOption) (*GetBiconomyAccountResponse, error)
	GetUserJobs(ctx context.Context, in *GetUserJobsRequest, opts ...grpc.CallOption) (*GetUserJobsResponse, error)
	GetCurrentStep(ctx context.Context, in *GetCurrentStepRequest, opts ...grpc.CallOption) (*GetCurrentStepResponse, error)
}

type strategyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStrategyServiceClient(cc grpc.ClientConnInterface) StrategyServiceClient {
	return &strategyServiceClient{cc}
}

func (c *strategyServiceClient) GetHealth(ctx context.Context, in *GetHealthRequest, opts ...grpc.CallOption) (*GetHealthResponse, error) {
	out := new(GetHealthResponse)
	err := c.cc.Invoke(ctx, "/strategy.StrategyService/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) GetStrategyList(ctx context.Context, in *GetStrategyListRequest, opts ...grpc.CallOption) (*GetStrategyListResponse, error) {
	out := new(GetStrategyListResponse)
	err := c.cc.Invoke(ctx, "/strategy.StrategyService/GetStrategyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionResponse, error) {
	out := new(GetPermissionResponse)
	err := c.cc.Invoke(ctx, "/strategy.StrategyService/GetPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*UpdatePermissionResponse, error) {
	out := new(UpdatePermissionResponse)
	err := c.cc.Invoke(ctx, "/strategy.StrategyService/UpdatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) StartStrategy(ctx context.Context, in *StartStrategyRequest, opts ...grpc.CallOption) (*StartStrategyResponse, error) {
	out := new(StartStrategyResponse)
	err := c.cc.Invoke(ctx, "/strategy.StrategyService/StartStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) WithdrawStrategy(ctx context.Context, in *WithdrawStrategyRequest, opts ...grpc.CallOption) (*WithdrawStrategyResponse, error) {
	out := new(WithdrawStrategyResponse)
	err := c.cc.Invoke(ctx, "/strategy.StrategyService/WithdrawStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) GetAPY(ctx context.Context, in *GetAPYRequest, opts ...grpc.CallOption) (*GetAPYResponse, error) {
	out := new(GetAPYResponse)
	err := c.cc.Invoke(ctx, "/strategy.StrategyService/GetAPY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) GetProtocolBalance(ctx context.Context, in *GetProtocolBalanceRequest, opts ...grpc.CallOption) (*GetProtocolBalanceResponse, error) {
	out := new(GetProtocolBalanceResponse)
	err := c.cc.Invoke(ctx, "/strategy.StrategyService/GetProtocolBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) GetBiconomyAccount(ctx context.Context, in *GetBiconomyAccountRequest, opts ...grpc.CallOption) (*GetBiconomyAccountResponse, error) {
	out := new(GetBiconomyAccountResponse)
	err := c.cc.Invoke(ctx, "/strategy.StrategyService/GetBiconomyAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) GetUserJobs(ctx context.Context, in *GetUserJobsRequest, opts ...grpc.CallOption) (*GetUserJobsResponse, error) {
	out := new(GetUserJobsResponse)
	err := c.cc.Invoke(ctx, "/strategy.StrategyService/GetUserJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategyServiceClient) GetCurrentStep(ctx context.Context, in *GetCurrentStepRequest, opts ...grpc.CallOption) (*GetCurrentStepResponse, error) {
	out := new(GetCurrentStepResponse)
	err := c.cc.Invoke(ctx, "/strategy.StrategyService/GetCurrentStep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StrategyServiceServer is the server API for StrategyService service.
// All implementations should embed UnimplementedStrategyServiceServer
// for forward compatibility
type StrategyServiceServer interface {
	GetHealth(context.Context, *GetHealthRequest) (*GetHealthResponse, error)
	GetStrategyList(context.Context, *GetStrategyListRequest) (*GetStrategyListResponse, error)
	GetPermission(context.Context, *GetPermissionRequest) (*GetPermissionResponse, error)
	UpdatePermission(context.Context, *UpdatePermissionRequest) (*UpdatePermissionResponse, error)
	StartStrategy(context.Context, *StartStrategyRequest) (*StartStrategyResponse, error)
	WithdrawStrategy(context.Context, *WithdrawStrategyRequest) (*WithdrawStrategyResponse, error)
	GetAPY(context.Context, *GetAPYRequest) (*GetAPYResponse, error)
	GetProtocolBalance(context.Context, *GetProtocolBalanceRequest) (*GetProtocolBalanceResponse, error)
	GetBiconomyAccount(context.Context, *GetBiconomyAccountRequest) (*GetBiconomyAccountResponse, error)
	GetUserJobs(context.Context, *GetUserJobsRequest) (*GetUserJobsResponse, error)
	GetCurrentStep(context.Context, *GetCurrentStepRequest) (*GetCurrentStepResponse, error)
}

// UnimplementedStrategyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStrategyServiceServer struct {
}

func (UnimplementedStrategyServiceServer) GetHealth(context.Context, *GetHealthRequest) (*GetHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedStrategyServiceServer) GetStrategyList(context.Context, *GetStrategyListRequest) (*GetStrategyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStrategyList not implemented")
}
func (UnimplementedStrategyServiceServer) GetPermission(context.Context, *GetPermissionRequest) (*GetPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (UnimplementedStrategyServiceServer) UpdatePermission(context.Context, *UpdatePermissionRequest) (*UpdatePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermission not implemented")
}
func (UnimplementedStrategyServiceServer) StartStrategy(context.Context, *StartStrategyRequest) (*StartStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStrategy not implemented")
}
func (UnimplementedStrategyServiceServer) WithdrawStrategy(context.Context, *WithdrawStrategyRequest) (*WithdrawStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawStrategy not implemented")
}
func (UnimplementedStrategyServiceServer) GetAPY(context.Context, *GetAPYRequest) (*GetAPYResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPY not implemented")
}
func (UnimplementedStrategyServiceServer) GetProtocolBalance(context.Context, *GetProtocolBalanceRequest) (*GetProtocolBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtocolBalance not implemented")
}
func (UnimplementedStrategyServiceServer) GetBiconomyAccount(context.Context, *GetBiconomyAccountRequest) (*GetBiconomyAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBiconomyAccount not implemented")
}
func (UnimplementedStrategyServiceServer) GetUserJobs(context.Context, *GetUserJobsRequest) (*GetUserJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserJobs not implemented")
}
func (UnimplementedStrategyServiceServer) GetCurrentStep(context.Context, *GetCurrentStepRequest) (*GetCurrentStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentStep not implemented")
}

// UnsafeStrategyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StrategyServiceServer will
// result in compilation errors.
type UnsafeStrategyServiceServer interface {
	mustEmbedUnimplementedStrategyServiceServer()
}

func RegisterStrategyServiceServer(s grpc.ServiceRegistrar, srv StrategyServiceServer) {
	s.RegisterService(&StrategyService_ServiceDesc, srv)
}

func _StrategyService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategy.StrategyService/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).GetHealth(ctx, req.(*GetHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_GetStrategyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStrategyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).GetStrategyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategy.StrategyService/GetStrategyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).GetStrategyList(ctx, req.(*GetStrategyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategy.StrategyService/GetPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).GetPermission(ctx, req.(*GetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategy.StrategyService/UpdatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).UpdatePermission(ctx, req.(*UpdatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_StartStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).StartStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategy.StrategyService/StartStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).StartStrategy(ctx, req.(*StartStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_WithdrawStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).WithdrawStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategy.StrategyService/WithdrawStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).WithdrawStrategy(ctx, req.(*WithdrawStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_GetAPY_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPYRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).GetAPY(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategy.StrategyService/GetAPY",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).GetAPY(ctx, req.(*GetAPYRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_GetProtocolBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProtocolBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).GetProtocolBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategy.StrategyService/GetProtocolBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).GetProtocolBalance(ctx, req.(*GetProtocolBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_GetBiconomyAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBiconomyAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).GetBiconomyAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategy.StrategyService/GetBiconomyAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).GetBiconomyAccount(ctx, req.(*GetBiconomyAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_GetUserJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).GetUserJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategy.StrategyService/GetUserJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).GetUserJobs(ctx, req.(*GetUserJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategyService_GetCurrentStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServiceServer).GetCurrentStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strategy.StrategyService/GetCurrentStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServiceServer).GetCurrentStep(ctx, req.(*GetCurrentStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StrategyService_ServiceDesc is the grpc.ServiceDesc for StrategyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StrategyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strategy.StrategyService",
	HandlerType: (*StrategyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _StrategyService_GetHealth_Handler,
		},
		{
			MethodName: "GetStrategyList",
			Handler:    _StrategyService_GetStrategyList_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _StrategyService_GetPermission_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _StrategyService_UpdatePermission_Handler,
		},
		{
			MethodName: "StartStrategy",
			Handler:    _StrategyService_StartStrategy_Handler,
		},
		{
			MethodName: "WithdrawStrategy",
			Handler:    _StrategyService_WithdrawStrategy_Handler,
		},
		{
			MethodName: "GetAPY",
			Handler:    _StrategyService_GetAPY_Handler,
		},
		{
			MethodName: "GetProtocolBalance",
			Handler:    _StrategyService_GetProtocolBalance_Handler,
		},
		{
			MethodName: "GetBiconomyAccount",
			Handler:    _StrategyService_GetBiconomyAccount_Handler,
		},
		{
			MethodName: "GetUserJobs",
			Handler:    _StrategyService_GetUserJobs_Handler,
		},
		{
			MethodName: "GetCurrentStep",
			Handler:    _StrategyService_GetCurrentStep_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strategy/service.proto",
}

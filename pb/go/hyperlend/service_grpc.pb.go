// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.0--rc1
// source: hyperlend/service.proto

package hyperlend

import (
	context "context"

	protocol "github.com/KOPs-ai/proto/pb/go/protocol"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HyperLendService_SupplyERC20_FullMethodName        = "/hyperlend.HyperLendService/SupplyERC20"
	HyperLendService_WithdrawERC20_FullMethodName      = "/hyperlend.HyperLendService/WithdrawERC20"
	HyperLendService_GetLendingPool_FullMethodName     = "/hyperlend.HyperLendService/GetLendingPool"
	HyperLendService_GetAPR_FullMethodName             = "/hyperlend.HyperLendService/GetAPR"
	HyperLendService_GetAPY_FullMethodName             = "/hyperlend.HyperLendService/GetAPY"
	HyperLendService_GetTVL_FullMethodName             = "/hyperlend.HyperLendService/GetTVL"
	HyperLendService_GetSuppliedBalance_FullMethodName = "/hyperlend.HyperLendService/GetSuppliedBalance"
	HyperLendService_GetBorrowedBalance_FullMethodName = "/hyperlend.HyperLendService/GetBorrowedBalance"
	HyperLendService_ApproveERC20_FullMethodName       = "/hyperlend.HyperLendService/ApproveERC20"
)

// HyperLendServiceClient is the client API for HyperLendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HyperLendServiceClient interface {
	SupplyERC20(ctx context.Context, in *SupplyERC20Request, opts ...grpc.CallOption) (*SupplyERC20Response, error)
	WithdrawERC20(ctx context.Context, in *WithdrawERC20Request, opts ...grpc.CallOption) (*WithdrawERC20Response, error)
	GetLendingPool(ctx context.Context, in *GetLendingPoolRequest, opts ...grpc.CallOption) (*GetLendingPoolResponse, error)
	GetAPR(ctx context.Context, in *protocol.GetAPRRequest, opts ...grpc.CallOption) (*protocol.GetAPRResponse, error)
	GetAPY(ctx context.Context, in *protocol.GetAPYRequest, opts ...grpc.CallOption) (*protocol.GetAPYResponse, error)
	GetTVL(ctx context.Context, in *protocol.GetTVLRequest, opts ...grpc.CallOption) (*protocol.GetTVLResponse, error)
	GetSuppliedBalance(ctx context.Context, in *protocol.SuppliedBalanceRequest, opts ...grpc.CallOption) (*protocol.SuppliedBalanceResponse, error)
	GetBorrowedBalance(ctx context.Context, in *protocol.BorrowedBalanceRequest, opts ...grpc.CallOption) (*protocol.BorrowedBalanceResponse, error)
	ApproveERC20(ctx context.Context, in *ApproveERC20Request, opts ...grpc.CallOption) (*ApproveERC20Response, error)
}

type hyperLendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHyperLendServiceClient(cc grpc.ClientConnInterface) HyperLendServiceClient {
	return &hyperLendServiceClient{cc}
}

func (c *hyperLendServiceClient) SupplyERC20(ctx context.Context, in *SupplyERC20Request, opts ...grpc.CallOption) (*SupplyERC20Response, error) {
	out := new(SupplyERC20Response)
	err := c.cc.Invoke(ctx, HyperLendService_SupplyERC20_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperLendServiceClient) WithdrawERC20(ctx context.Context, in *WithdrawERC20Request, opts ...grpc.CallOption) (*WithdrawERC20Response, error) {
	out := new(WithdrawERC20Response)
	err := c.cc.Invoke(ctx, HyperLendService_WithdrawERC20_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperLendServiceClient) GetLendingPool(ctx context.Context, in *GetLendingPoolRequest, opts ...grpc.CallOption) (*GetLendingPoolResponse, error) {
	out := new(GetLendingPoolResponse)
	err := c.cc.Invoke(ctx, HyperLendService_GetLendingPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperLendServiceClient) GetAPR(ctx context.Context, in *protocol.GetAPRRequest, opts ...grpc.CallOption) (*protocol.GetAPRResponse, error) {
	out := new(protocol.GetAPRResponse)
	err := c.cc.Invoke(ctx, HyperLendService_GetAPR_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperLendServiceClient) GetAPY(ctx context.Context, in *protocol.GetAPYRequest, opts ...grpc.CallOption) (*protocol.GetAPYResponse, error) {
	out := new(protocol.GetAPYResponse)
	err := c.cc.Invoke(ctx, HyperLendService_GetAPY_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperLendServiceClient) GetTVL(ctx context.Context, in *protocol.GetTVLRequest, opts ...grpc.CallOption) (*protocol.GetTVLResponse, error) {
	out := new(protocol.GetTVLResponse)
	err := c.cc.Invoke(ctx, HyperLendService_GetTVL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperLendServiceClient) GetSuppliedBalance(ctx context.Context, in *protocol.SuppliedBalanceRequest, opts ...grpc.CallOption) (*protocol.SuppliedBalanceResponse, error) {
	out := new(protocol.SuppliedBalanceResponse)
	err := c.cc.Invoke(ctx, HyperLendService_GetSuppliedBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperLendServiceClient) GetBorrowedBalance(ctx context.Context, in *protocol.BorrowedBalanceRequest, opts ...grpc.CallOption) (*protocol.BorrowedBalanceResponse, error) {
	out := new(protocol.BorrowedBalanceResponse)
	err := c.cc.Invoke(ctx, HyperLendService_GetBorrowedBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperLendServiceClient) ApproveERC20(ctx context.Context, in *ApproveERC20Request, opts ...grpc.CallOption) (*ApproveERC20Response, error) {
	out := new(ApproveERC20Response)
	err := c.cc.Invoke(ctx, HyperLendService_ApproveERC20_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HyperLendServiceServer is the server API for HyperLendService service.
// All implementations should embed UnimplementedHyperLendServiceServer
// for forward compatibility
type HyperLendServiceServer interface {
	SupplyERC20(context.Context, *SupplyERC20Request) (*SupplyERC20Response, error)
	WithdrawERC20(context.Context, *WithdrawERC20Request) (*WithdrawERC20Response, error)
	GetLendingPool(context.Context, *GetLendingPoolRequest) (*GetLendingPoolResponse, error)
	GetAPR(context.Context, *protocol.GetAPRRequest) (*protocol.GetAPRResponse, error)
	GetAPY(context.Context, *protocol.GetAPYRequest) (*protocol.GetAPYResponse, error)
	GetTVL(context.Context, *protocol.GetTVLRequest) (*protocol.GetTVLResponse, error)
	GetSuppliedBalance(context.Context, *protocol.SuppliedBalanceRequest) (*protocol.SuppliedBalanceResponse, error)
	GetBorrowedBalance(context.Context, *protocol.BorrowedBalanceRequest) (*protocol.BorrowedBalanceResponse, error)
	ApproveERC20(context.Context, *ApproveERC20Request) (*ApproveERC20Response, error)
}

// UnimplementedHyperLendServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHyperLendServiceServer struct {
}

func (UnimplementedHyperLendServiceServer) SupplyERC20(context.Context, *SupplyERC20Request) (*SupplyERC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplyERC20 not implemented")
}
func (UnimplementedHyperLendServiceServer) WithdrawERC20(context.Context, *WithdrawERC20Request) (*WithdrawERC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawERC20 not implemented")
}
func (UnimplementedHyperLendServiceServer) GetLendingPool(context.Context, *GetLendingPoolRequest) (*GetLendingPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLendingPool not implemented")
}
func (UnimplementedHyperLendServiceServer) GetAPR(context.Context, *protocol.GetAPRRequest) (*protocol.GetAPRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPR not implemented")
}
func (UnimplementedHyperLendServiceServer) GetAPY(context.Context, *protocol.GetAPYRequest) (*protocol.GetAPYResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPY not implemented")
}
func (UnimplementedHyperLendServiceServer) GetTVL(context.Context, *protocol.GetTVLRequest) (*protocol.GetTVLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTVL not implemented")
}
func (UnimplementedHyperLendServiceServer) GetSuppliedBalance(context.Context, *protocol.SuppliedBalanceRequest) (*protocol.SuppliedBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuppliedBalance not implemented")
}
func (UnimplementedHyperLendServiceServer) GetBorrowedBalance(context.Context, *protocol.BorrowedBalanceRequest) (*protocol.BorrowedBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorrowedBalance not implemented")
}
func (UnimplementedHyperLendServiceServer) ApproveERC20(context.Context, *ApproveERC20Request) (*ApproveERC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveERC20 not implemented")
}

// UnsafeHyperLendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HyperLendServiceServer will
// result in compilation errors.
type UnsafeHyperLendServiceServer interface {
	mustEmbedUnimplementedHyperLendServiceServer()
}

func RegisterHyperLendServiceServer(s grpc.ServiceRegistrar, srv HyperLendServiceServer) {
	s.RegisterService(&HyperLendService_ServiceDesc, srv)
}

func _HyperLendService_SupplyERC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplyERC20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperLendServiceServer).SupplyERC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HyperLendService_SupplyERC20_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperLendServiceServer).SupplyERC20(ctx, req.(*SupplyERC20Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperLendService_WithdrawERC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawERC20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperLendServiceServer).WithdrawERC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HyperLendService_WithdrawERC20_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperLendServiceServer).WithdrawERC20(ctx, req.(*WithdrawERC20Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperLendService_GetLendingPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLendingPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperLendServiceServer).GetLendingPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HyperLendService_GetLendingPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperLendServiceServer).GetLendingPool(ctx, req.(*GetLendingPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperLendService_GetAPR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.GetAPRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperLendServiceServer).GetAPR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HyperLendService_GetAPR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperLendServiceServer).GetAPR(ctx, req.(*protocol.GetAPRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperLendService_GetAPY_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.GetAPYRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperLendServiceServer).GetAPY(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HyperLendService_GetAPY_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperLendServiceServer).GetAPY(ctx, req.(*protocol.GetAPYRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperLendService_GetTVL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.GetTVLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperLendServiceServer).GetTVL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HyperLendService_GetTVL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperLendServiceServer).GetTVL(ctx, req.(*protocol.GetTVLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperLendService_GetSuppliedBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.SuppliedBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperLendServiceServer).GetSuppliedBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HyperLendService_GetSuppliedBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperLendServiceServer).GetSuppliedBalance(ctx, req.(*protocol.SuppliedBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperLendService_GetBorrowedBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.BorrowedBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperLendServiceServer).GetBorrowedBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HyperLendService_GetBorrowedBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperLendServiceServer).GetBorrowedBalance(ctx, req.(*protocol.BorrowedBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperLendService_ApproveERC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveERC20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperLendServiceServer).ApproveERC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HyperLendService_ApproveERC20_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperLendServiceServer).ApproveERC20(ctx, req.(*ApproveERC20Request))
	}
	return interceptor(ctx, in, info, handler)
}

// HyperLendService_ServiceDesc is the grpc.ServiceDesc for HyperLendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HyperLendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hyperlend.HyperLendService",
	HandlerType: (*HyperLendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SupplyERC20",
			Handler:    _HyperLendService_SupplyERC20_Handler,
		},
		{
			MethodName: "WithdrawERC20",
			Handler:    _HyperLendService_WithdrawERC20_Handler,
		},
		{
			MethodName: "GetLendingPool",
			Handler:    _HyperLendService_GetLendingPool_Handler,
		},
		{
			MethodName: "GetAPR",
			Handler:    _HyperLendService_GetAPR_Handler,
		},
		{
			MethodName: "GetAPY",
			Handler:    _HyperLendService_GetAPY_Handler,
		},
		{
			MethodName: "GetTVL",
			Handler:    _HyperLendService_GetTVL_Handler,
		},
		{
			MethodName: "GetSuppliedBalance",
			Handler:    _HyperLendService_GetSuppliedBalance_Handler,
		},
		{
			MethodName: "GetBorrowedBalance",
			Handler:    _HyperLendService_GetBorrowedBalance_Handler,
		},
		{
			MethodName: "ApproveERC20",
			Handler:    _HyperLendService_ApproveERC20_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hyperlend/service.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProtocolServiceClient is the client API for ProtocolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtocolServiceClient interface {
	GetAPR(ctx context.Context, in *GetAPRRequest, opts ...grpc.CallOption) (*GetAPRResponse, error)
	GetAPY(ctx context.Context, in *GetAPYRequest, opts ...grpc.CallOption) (*GetAPYResponse, error)
	GetTVL(ctx context.Context, in *GetTVLRequest, opts ...grpc.CallOption) (*GetTVLResponse, error)
	GetLTV(ctx context.Context, in *GetLTVRequest, opts ...grpc.CallOption) (*GetLTVResponse, error)
	GetBorrowCap(ctx context.Context, in *GetBorrowCapRequest, opts ...grpc.CallOption) (*GetBorrowCapResponse, error)
	GetSupplyCap(ctx context.Context, in *GetSupplyCapRequest, opts ...grpc.CallOption) (*GetSupplyCapResponse, error)
	GetSuppliedBalance(ctx context.Context, in *SuppliedBalanceRequest, opts ...grpc.CallOption) (*SuppliedBalanceResponse, error)
	GetBorrowedBalance(ctx context.Context, in *BorrowedBalanceRequest, opts ...grpc.CallOption) (*BorrowedBalanceResponse, error)
	GetLiquidity(ctx context.Context, in *GetLiquidityRequest, opts ...grpc.CallOption) (*GetLiquidityResponse, error)
}

type protocolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProtocolServiceClient(cc grpc.ClientConnInterface) ProtocolServiceClient {
	return &protocolServiceClient{cc}
}

func (c *protocolServiceClient) GetAPR(ctx context.Context, in *GetAPRRequest, opts ...grpc.CallOption) (*GetAPRResponse, error) {
	out := new(GetAPRResponse)
	err := c.cc.Invoke(ctx, "/protocol.ProtocolService/GetAPR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) GetAPY(ctx context.Context, in *GetAPYRequest, opts ...grpc.CallOption) (*GetAPYResponse, error) {
	out := new(GetAPYResponse)
	err := c.cc.Invoke(ctx, "/protocol.ProtocolService/GetAPY", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) GetTVL(ctx context.Context, in *GetTVLRequest, opts ...grpc.CallOption) (*GetTVLResponse, error) {
	out := new(GetTVLResponse)
	err := c.cc.Invoke(ctx, "/protocol.ProtocolService/GetTVL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) GetLTV(ctx context.Context, in *GetLTVRequest, opts ...grpc.CallOption) (*GetLTVResponse, error) {
	out := new(GetLTVResponse)
	err := c.cc.Invoke(ctx, "/protocol.ProtocolService/GetLTV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) GetBorrowCap(ctx context.Context, in *GetBorrowCapRequest, opts ...grpc.CallOption) (*GetBorrowCapResponse, error) {
	out := new(GetBorrowCapResponse)
	err := c.cc.Invoke(ctx, "/protocol.ProtocolService/GetBorrowCap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) GetSupplyCap(ctx context.Context, in *GetSupplyCapRequest, opts ...grpc.CallOption) (*GetSupplyCapResponse, error) {
	out := new(GetSupplyCapResponse)
	err := c.cc.Invoke(ctx, "/protocol.ProtocolService/GetSupplyCap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) GetSuppliedBalance(ctx context.Context, in *SuppliedBalanceRequest, opts ...grpc.CallOption) (*SuppliedBalanceResponse, error) {
	out := new(SuppliedBalanceResponse)
	err := c.cc.Invoke(ctx, "/protocol.ProtocolService/GetSuppliedBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) GetBorrowedBalance(ctx context.Context, in *BorrowedBalanceRequest, opts ...grpc.CallOption) (*BorrowedBalanceResponse, error) {
	out := new(BorrowedBalanceResponse)
	err := c.cc.Invoke(ctx, "/protocol.ProtocolService/GetBorrowedBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolServiceClient) GetLiquidity(ctx context.Context, in *GetLiquidityRequest, opts ...grpc.CallOption) (*GetLiquidityResponse, error) {
	out := new(GetLiquidityResponse)
	err := c.cc.Invoke(ctx, "/protocol.ProtocolService/GetLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtocolServiceServer is the server API for ProtocolService service.
// All implementations should embed UnimplementedProtocolServiceServer
// for forward compatibility
type ProtocolServiceServer interface {
	GetAPR(context.Context, *GetAPRRequest) (*GetAPRResponse, error)
	GetAPY(context.Context, *GetAPYRequest) (*GetAPYResponse, error)
	GetTVL(context.Context, *GetTVLRequest) (*GetTVLResponse, error)
	GetLTV(context.Context, *GetLTVRequest) (*GetLTVResponse, error)
	GetBorrowCap(context.Context, *GetBorrowCapRequest) (*GetBorrowCapResponse, error)
	GetSupplyCap(context.Context, *GetSupplyCapRequest) (*GetSupplyCapResponse, error)
	GetSuppliedBalance(context.Context, *SuppliedBalanceRequest) (*SuppliedBalanceResponse, error)
	GetBorrowedBalance(context.Context, *BorrowedBalanceRequest) (*BorrowedBalanceResponse, error)
	GetLiquidity(context.Context, *GetLiquidityRequest) (*GetLiquidityResponse, error)
}

// UnimplementedProtocolServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProtocolServiceServer struct {
}

func (UnimplementedProtocolServiceServer) GetAPR(context.Context, *GetAPRRequest) (*GetAPRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPR not implemented")
}
func (UnimplementedProtocolServiceServer) GetAPY(context.Context, *GetAPYRequest) (*GetAPYResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPY not implemented")
}
func (UnimplementedProtocolServiceServer) GetTVL(context.Context, *GetTVLRequest) (*GetTVLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTVL not implemented")
}
func (UnimplementedProtocolServiceServer) GetLTV(context.Context, *GetLTVRequest) (*GetLTVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLTV not implemented")
}
func (UnimplementedProtocolServiceServer) GetBorrowCap(context.Context, *GetBorrowCapRequest) (*GetBorrowCapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorrowCap not implemented")
}
func (UnimplementedProtocolServiceServer) GetSupplyCap(context.Context, *GetSupplyCapRequest) (*GetSupplyCapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupplyCap not implemented")
}
func (UnimplementedProtocolServiceServer) GetSuppliedBalance(context.Context, *SuppliedBalanceRequest) (*SuppliedBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuppliedBalance not implemented")
}
func (UnimplementedProtocolServiceServer) GetBorrowedBalance(context.Context, *BorrowedBalanceRequest) (*BorrowedBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorrowedBalance not implemented")
}
func (UnimplementedProtocolServiceServer) GetLiquidity(context.Context, *GetLiquidityRequest) (*GetLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiquidity not implemented")
}

// UnsafeProtocolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtocolServiceServer will
// result in compilation errors.
type UnsafeProtocolServiceServer interface {
	mustEmbedUnimplementedProtocolServiceServer()
}

func RegisterProtocolServiceServer(s grpc.ServiceRegistrar, srv ProtocolServiceServer) {
	s.RegisterService(&ProtocolService_ServiceDesc, srv)
}

func _ProtocolService_GetAPR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).GetAPR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ProtocolService/GetAPR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).GetAPR(ctx, req.(*GetAPRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_GetAPY_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPYRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).GetAPY(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ProtocolService/GetAPY",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).GetAPY(ctx, req.(*GetAPYRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_GetTVL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTVLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).GetTVL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ProtocolService/GetTVL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).GetTVL(ctx, req.(*GetTVLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_GetLTV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLTVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).GetLTV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ProtocolService/GetLTV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).GetLTV(ctx, req.(*GetLTVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_GetBorrowCap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBorrowCapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).GetBorrowCap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ProtocolService/GetBorrowCap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).GetBorrowCap(ctx, req.(*GetBorrowCapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_GetSupplyCap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupplyCapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).GetSupplyCap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ProtocolService/GetSupplyCap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).GetSupplyCap(ctx, req.(*GetSupplyCapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_GetSuppliedBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuppliedBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).GetSuppliedBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ProtocolService/GetSuppliedBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).GetSuppliedBalance(ctx, req.(*SuppliedBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_GetBorrowedBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowedBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).GetBorrowedBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ProtocolService/GetBorrowedBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).GetBorrowedBalance(ctx, req.(*BorrowedBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolService_GetLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServiceServer).GetLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ProtocolService/GetLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServiceServer).GetLiquidity(ctx, req.(*GetLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtocolService_ServiceDesc is the grpc.ServiceDesc for ProtocolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtocolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.ProtocolService",
	HandlerType: (*ProtocolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPR",
			Handler:    _ProtocolService_GetAPR_Handler,
		},
		{
			MethodName: "GetAPY",
			Handler:    _ProtocolService_GetAPY_Handler,
		},
		{
			MethodName: "GetTVL",
			Handler:    _ProtocolService_GetTVL_Handler,
		},
		{
			MethodName: "GetLTV",
			Handler:    _ProtocolService_GetLTV_Handler,
		},
		{
			MethodName: "GetBorrowCap",
			Handler:    _ProtocolService_GetBorrowCap_Handler,
		},
		{
			MethodName: "GetSupplyCap",
			Handler:    _ProtocolService_GetSupplyCap_Handler,
		},
		{
			MethodName: "GetSuppliedBalance",
			Handler:    _ProtocolService_GetSuppliedBalance_Handler,
		},
		{
			MethodName: "GetBorrowedBalance",
			Handler:    _ProtocolService_GetBorrowedBalance_Handler,
		},
		{
			MethodName: "GetLiquidity",
			Handler:    _ProtocolService_GetLiquidity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/service.proto",
}

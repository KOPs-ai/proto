// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package compound

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompoundServiceClient is the client API for CompoundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompoundServiceClient interface {
	SupplyERC20(ctx context.Context, in *SupplyERC20Request, opts ...grpc.CallOption) (*SupplyERC20Response, error)
	WithdrawERC20(ctx context.Context, in *WithdrawERC20Request, opts ...grpc.CallOption) (*WithdrawERC20Response, error)
	GetAPR(ctx context.Context, in *GetAPRRequest, opts ...grpc.CallOption) (*GetAPRResponse, error)
	GetSuppliedBalance(ctx context.Context, in *SuppliedBalanceRequest, opts ...grpc.CallOption) (*SuppliedBalanceResponse, error)
}

type compoundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompoundServiceClient(cc grpc.ClientConnInterface) CompoundServiceClient {
	return &compoundServiceClient{cc}
}

func (c *compoundServiceClient) SupplyERC20(ctx context.Context, in *SupplyERC20Request, opts ...grpc.CallOption) (*SupplyERC20Response, error) {
	out := new(SupplyERC20Response)
	err := c.cc.Invoke(ctx, "/compound.CompoundService/SupplyERC20", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compoundServiceClient) WithdrawERC20(ctx context.Context, in *WithdrawERC20Request, opts ...grpc.CallOption) (*WithdrawERC20Response, error) {
	out := new(WithdrawERC20Response)
	err := c.cc.Invoke(ctx, "/compound.CompoundService/WithdrawERC20", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compoundServiceClient) GetAPR(ctx context.Context, in *GetAPRRequest, opts ...grpc.CallOption) (*GetAPRResponse, error) {
	out := new(GetAPRResponse)
	err := c.cc.Invoke(ctx, "/compound.CompoundService/GetAPR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compoundServiceClient) GetSuppliedBalance(ctx context.Context, in *SuppliedBalanceRequest, opts ...grpc.CallOption) (*SuppliedBalanceResponse, error) {
	out := new(SuppliedBalanceResponse)
	err := c.cc.Invoke(ctx, "/compound.CompoundService/GetSuppliedBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompoundServiceServer is the server API for CompoundService service.
// All implementations should embed UnimplementedCompoundServiceServer
// for forward compatibility
type CompoundServiceServer interface {
	SupplyERC20(context.Context, *SupplyERC20Request) (*SupplyERC20Response, error)
	WithdrawERC20(context.Context, *WithdrawERC20Request) (*WithdrawERC20Response, error)
	GetAPR(context.Context, *GetAPRRequest) (*GetAPRResponse, error)
	GetSuppliedBalance(context.Context, *SuppliedBalanceRequest) (*SuppliedBalanceResponse, error)
}

// UnimplementedCompoundServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCompoundServiceServer struct {
}

func (UnimplementedCompoundServiceServer) SupplyERC20(context.Context, *SupplyERC20Request) (*SupplyERC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplyERC20 not implemented")
}
func (UnimplementedCompoundServiceServer) WithdrawERC20(context.Context, *WithdrawERC20Request) (*WithdrawERC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawERC20 not implemented")
}
func (UnimplementedCompoundServiceServer) GetAPR(context.Context, *GetAPRRequest) (*GetAPRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPR not implemented")
}
func (UnimplementedCompoundServiceServer) GetSuppliedBalance(context.Context, *SuppliedBalanceRequest) (*SuppliedBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuppliedBalance not implemented")
}

// UnsafeCompoundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompoundServiceServer will
// result in compilation errors.
type UnsafeCompoundServiceServer interface {
	mustEmbedUnimplementedCompoundServiceServer()
}

func RegisterCompoundServiceServer(s grpc.ServiceRegistrar, srv CompoundServiceServer) {
	s.RegisterService(&CompoundService_ServiceDesc, srv)
}

func _CompoundService_SupplyERC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplyERC20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompoundServiceServer).SupplyERC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compound.CompoundService/SupplyERC20",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompoundServiceServer).SupplyERC20(ctx, req.(*SupplyERC20Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompoundService_WithdrawERC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawERC20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompoundServiceServer).WithdrawERC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compound.CompoundService/WithdrawERC20",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompoundServiceServer).WithdrawERC20(ctx, req.(*WithdrawERC20Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompoundService_GetAPR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompoundServiceServer).GetAPR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compound.CompoundService/GetAPR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompoundServiceServer).GetAPR(ctx, req.(*GetAPRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompoundService_GetSuppliedBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuppliedBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompoundServiceServer).GetSuppliedBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compound.CompoundService/GetSuppliedBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompoundServiceServer).GetSuppliedBalance(ctx, req.(*SuppliedBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompoundService_ServiceDesc is the grpc.ServiceDesc for CompoundService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompoundService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compound.CompoundService",
	HandlerType: (*CompoundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SupplyERC20",
			Handler:    _CompoundService_SupplyERC20_Handler,
		},
		{
			MethodName: "WithdrawERC20",
			Handler:    _CompoundService_WithdrawERC20_Handler,
		},
		{
			MethodName: "GetAPR",
			Handler:    _CompoundService_GetAPR_Handler,
		},
		{
			MethodName: "GetSuppliedBalance",
			Handler:    _CompoundService_GetSuppliedBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compound/service.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.0--rc1
// source: hypurrfi/service.proto

package hypurrfi

import (
	context "context"

	protocol "github.com/KOPs-ai/proto/pb/go/protocol"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HypurrfiService_SupplyERC20_FullMethodName        = "/hypurrfi.HypurrfiService/SupplyERC20"
	HypurrfiService_WithdrawERC20_FullMethodName      = "/hypurrfi.HypurrfiService/WithdrawERC20"
	HypurrfiService_GetLendingPool_FullMethodName     = "/hypurrfi.HypurrfiService/GetLendingPool"
	HypurrfiService_GetAPR_FullMethodName             = "/hypurrfi.HypurrfiService/GetAPR"
	HypurrfiService_GetAPY_FullMethodName             = "/hypurrfi.HypurrfiService/GetAPY"
	HypurrfiService_GetTVL_FullMethodName             = "/hypurrfi.HypurrfiService/GetTVL"
	HypurrfiService_GetSuppliedBalance_FullMethodName = "/hypurrfi.HypurrfiService/GetSuppliedBalance"
	HypurrfiService_GetBorrowedBalance_FullMethodName = "/hypurrfi.HypurrfiService/GetBorrowedBalance"
	HypurrfiService_ApproveERC20_FullMethodName       = "/hypurrfi.HypurrfiService/ApproveERC20"
)

// HypurrfiServiceClient is the client API for HypurrfiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HypurrfiServiceClient interface {
	SupplyERC20(ctx context.Context, in *SupplyERC20Request, opts ...grpc.CallOption) (*SupplyERC20Response, error)
	WithdrawERC20(ctx context.Context, in *WithdrawERC20Request, opts ...grpc.CallOption) (*WithdrawERC20Response, error)
	GetLendingPool(ctx context.Context, in *GetLendingPoolRequest, opts ...grpc.CallOption) (*GetLendingPoolResponse, error)
	GetAPR(ctx context.Context, in *protocol.GetAPRRequest, opts ...grpc.CallOption) (*protocol.GetAPRResponse, error)
	GetAPY(ctx context.Context, in *protocol.GetAPYRequest, opts ...grpc.CallOption) (*protocol.GetAPYResponse, error)
	GetTVL(ctx context.Context, in *protocol.GetTVLRequest, opts ...grpc.CallOption) (*protocol.GetTVLResponse, error)
	GetSuppliedBalance(ctx context.Context, in *protocol.SuppliedBalanceRequest, opts ...grpc.CallOption) (*protocol.SuppliedBalanceResponse, error)
	GetBorrowedBalance(ctx context.Context, in *protocol.BorrowedBalanceRequest, opts ...grpc.CallOption) (*protocol.BorrowedBalanceResponse, error)
	ApproveERC20(ctx context.Context, in *ApproveERC20Request, opts ...grpc.CallOption) (*ApproveERC20Response, error)
}

type hypurrfiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHypurrfiServiceClient(cc grpc.ClientConnInterface) HypurrfiServiceClient {
	return &hypurrfiServiceClient{cc}
}

func (c *hypurrfiServiceClient) SupplyERC20(ctx context.Context, in *SupplyERC20Request, opts ...grpc.CallOption) (*SupplyERC20Response, error) {
	out := new(SupplyERC20Response)
	err := c.cc.Invoke(ctx, HypurrfiService_SupplyERC20_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hypurrfiServiceClient) WithdrawERC20(ctx context.Context, in *WithdrawERC20Request, opts ...grpc.CallOption) (*WithdrawERC20Response, error) {
	out := new(WithdrawERC20Response)
	err := c.cc.Invoke(ctx, HypurrfiService_WithdrawERC20_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hypurrfiServiceClient) GetLendingPool(ctx context.Context, in *GetLendingPoolRequest, opts ...grpc.CallOption) (*GetLendingPoolResponse, error) {
	out := new(GetLendingPoolResponse)
	err := c.cc.Invoke(ctx, HypurrfiService_GetLendingPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hypurrfiServiceClient) GetAPR(ctx context.Context, in *protocol.GetAPRRequest, opts ...grpc.CallOption) (*protocol.GetAPRResponse, error) {
	out := new(protocol.GetAPRResponse)
	err := c.cc.Invoke(ctx, HypurrfiService_GetAPR_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hypurrfiServiceClient) GetAPY(ctx context.Context, in *protocol.GetAPYRequest, opts ...grpc.CallOption) (*protocol.GetAPYResponse, error) {
	out := new(protocol.GetAPYResponse)
	err := c.cc.Invoke(ctx, HypurrfiService_GetAPY_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hypurrfiServiceClient) GetTVL(ctx context.Context, in *protocol.GetTVLRequest, opts ...grpc.CallOption) (*protocol.GetTVLResponse, error) {
	out := new(protocol.GetTVLResponse)
	err := c.cc.Invoke(ctx, HypurrfiService_GetTVL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hypurrfiServiceClient) GetSuppliedBalance(ctx context.Context, in *protocol.SuppliedBalanceRequest, opts ...grpc.CallOption) (*protocol.SuppliedBalanceResponse, error) {
	out := new(protocol.SuppliedBalanceResponse)
	err := c.cc.Invoke(ctx, HypurrfiService_GetSuppliedBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hypurrfiServiceClient) GetBorrowedBalance(ctx context.Context, in *protocol.BorrowedBalanceRequest, opts ...grpc.CallOption) (*protocol.BorrowedBalanceResponse, error) {
	out := new(protocol.BorrowedBalanceResponse)
	err := c.cc.Invoke(ctx, HypurrfiService_GetBorrowedBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hypurrfiServiceClient) ApproveERC20(ctx context.Context, in *ApproveERC20Request, opts ...grpc.CallOption) (*ApproveERC20Response, error) {
	out := new(ApproveERC20Response)
	err := c.cc.Invoke(ctx, HypurrfiService_ApproveERC20_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HypurrfiServiceServer is the server API for HypurrfiService service.
// All implementations should embed UnimplementedHypurrfiServiceServer
// for forward compatibility
type HypurrfiServiceServer interface {
	SupplyERC20(context.Context, *SupplyERC20Request) (*SupplyERC20Response, error)
	WithdrawERC20(context.Context, *WithdrawERC20Request) (*WithdrawERC20Response, error)
	GetLendingPool(context.Context, *GetLendingPoolRequest) (*GetLendingPoolResponse, error)
	GetAPR(context.Context, *protocol.GetAPRRequest) (*protocol.GetAPRResponse, error)
	GetAPY(context.Context, *protocol.GetAPYRequest) (*protocol.GetAPYResponse, error)
	GetTVL(context.Context, *protocol.GetTVLRequest) (*protocol.GetTVLResponse, error)
	GetSuppliedBalance(context.Context, *protocol.SuppliedBalanceRequest) (*protocol.SuppliedBalanceResponse, error)
	GetBorrowedBalance(context.Context, *protocol.BorrowedBalanceRequest) (*protocol.BorrowedBalanceResponse, error)
	ApproveERC20(context.Context, *ApproveERC20Request) (*ApproveERC20Response, error)
}

// UnimplementedHypurrfiServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHypurrfiServiceServer struct {
}

func (UnimplementedHypurrfiServiceServer) SupplyERC20(context.Context, *SupplyERC20Request) (*SupplyERC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplyERC20 not implemented")
}
func (UnimplementedHypurrfiServiceServer) WithdrawERC20(context.Context, *WithdrawERC20Request) (*WithdrawERC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawERC20 not implemented")
}
func (UnimplementedHypurrfiServiceServer) GetLendingPool(context.Context, *GetLendingPoolRequest) (*GetLendingPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLendingPool not implemented")
}
func (UnimplementedHypurrfiServiceServer) GetAPR(context.Context, *protocol.GetAPRRequest) (*protocol.GetAPRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPR not implemented")
}
func (UnimplementedHypurrfiServiceServer) GetAPY(context.Context, *protocol.GetAPYRequest) (*protocol.GetAPYResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPY not implemented")
}
func (UnimplementedHypurrfiServiceServer) GetTVL(context.Context, *protocol.GetTVLRequest) (*protocol.GetTVLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTVL not implemented")
}
func (UnimplementedHypurrfiServiceServer) GetSuppliedBalance(context.Context, *protocol.SuppliedBalanceRequest) (*protocol.SuppliedBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuppliedBalance not implemented")
}
func (UnimplementedHypurrfiServiceServer) GetBorrowedBalance(context.Context, *protocol.BorrowedBalanceRequest) (*protocol.BorrowedBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorrowedBalance not implemented")
}
func (UnimplementedHypurrfiServiceServer) ApproveERC20(context.Context, *ApproveERC20Request) (*ApproveERC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveERC20 not implemented")
}

// UnsafeHypurrfiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HypurrfiServiceServer will
// result in compilation errors.
type UnsafeHypurrfiServiceServer interface {
	mustEmbedUnimplementedHypurrfiServiceServer()
}

func RegisterHypurrfiServiceServer(s grpc.ServiceRegistrar, srv HypurrfiServiceServer) {
	s.RegisterService(&HypurrfiService_ServiceDesc, srv)
}

func _HypurrfiService_SupplyERC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplyERC20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HypurrfiServiceServer).SupplyERC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HypurrfiService_SupplyERC20_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HypurrfiServiceServer).SupplyERC20(ctx, req.(*SupplyERC20Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HypurrfiService_WithdrawERC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawERC20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HypurrfiServiceServer).WithdrawERC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HypurrfiService_WithdrawERC20_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HypurrfiServiceServer).WithdrawERC20(ctx, req.(*WithdrawERC20Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HypurrfiService_GetLendingPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLendingPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HypurrfiServiceServer).GetLendingPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HypurrfiService_GetLendingPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HypurrfiServiceServer).GetLendingPool(ctx, req.(*GetLendingPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HypurrfiService_GetAPR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.GetAPRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HypurrfiServiceServer).GetAPR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HypurrfiService_GetAPR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HypurrfiServiceServer).GetAPR(ctx, req.(*protocol.GetAPRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HypurrfiService_GetAPY_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.GetAPYRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HypurrfiServiceServer).GetAPY(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HypurrfiService_GetAPY_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HypurrfiServiceServer).GetAPY(ctx, req.(*protocol.GetAPYRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HypurrfiService_GetTVL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.GetTVLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HypurrfiServiceServer).GetTVL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HypurrfiService_GetTVL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HypurrfiServiceServer).GetTVL(ctx, req.(*protocol.GetTVLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HypurrfiService_GetSuppliedBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.SuppliedBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HypurrfiServiceServer).GetSuppliedBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HypurrfiService_GetSuppliedBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HypurrfiServiceServer).GetSuppliedBalance(ctx, req.(*protocol.SuppliedBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HypurrfiService_GetBorrowedBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.BorrowedBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HypurrfiServiceServer).GetBorrowedBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HypurrfiService_GetBorrowedBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HypurrfiServiceServer).GetBorrowedBalance(ctx, req.(*protocol.BorrowedBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HypurrfiService_ApproveERC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveERC20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HypurrfiServiceServer).ApproveERC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HypurrfiService_ApproveERC20_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HypurrfiServiceServer).ApproveERC20(ctx, req.(*ApproveERC20Request))
	}
	return interceptor(ctx, in, info, handler)
}

// HypurrfiService_ServiceDesc is the grpc.ServiceDesc for HypurrfiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HypurrfiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hypurrfi.HypurrfiService",
	HandlerType: (*HypurrfiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SupplyERC20",
			Handler:    _HypurrfiService_SupplyERC20_Handler,
		},
		{
			MethodName: "WithdrawERC20",
			Handler:    _HypurrfiService_WithdrawERC20_Handler,
		},
		{
			MethodName: "GetLendingPool",
			Handler:    _HypurrfiService_GetLendingPool_Handler,
		},
		{
			MethodName: "GetAPR",
			Handler:    _HypurrfiService_GetAPR_Handler,
		},
		{
			MethodName: "GetAPY",
			Handler:    _HypurrfiService_GetAPY_Handler,
		},
		{
			MethodName: "GetTVL",
			Handler:    _HypurrfiService_GetTVL_Handler,
		},
		{
			MethodName: "GetSuppliedBalance",
			Handler:    _HypurrfiService_GetSuppliedBalance_Handler,
		},
		{
			MethodName: "GetBorrowedBalance",
			Handler:    _HypurrfiService_GetBorrowedBalance_Handler,
		},
		{
			MethodName: "ApproveERC20",
			Handler:    _HypurrfiService_ApproveERC20_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hypurrfi/service.proto",
}
